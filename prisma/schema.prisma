// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String?         @unique // Optional email field
  phone         String          @unique
  name          String
  username      String          @unique
  password      String
  type          UserType // Enum for user type
  status        Status // Enum for user Status
  photo         String?
  purchaseOrder PurchaseOrder[]
  grn           GRN[]
  tpn           TPN[]
  // activityLog []

  @@index([phone, email, username])
  @@map("users") // Maps to the "users" collection in MongoDB
}

// Define your Customer model
model Customer {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String       @unique
  email      String?
  address    Address[]
  photo      String?
  username   String?
  password   String?
  type       CustomerType @default(Wholesale)
  status     Status       @default(Active)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  customerId String       @unique

  //Corporate

  contactPerson      String?
  contactPersonPhone String?
  company            String?
  designation        String?
  bin                String?
  tin                String?
  treadLicense       String?
  creditOption       String?
  cLimitAmount       String?
  cLimitDay          String?

  @@index([phone, email, username])
  @@map("customers")
}

// Define the Address model
model Address {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  street   String
  city     String
  district String
  division String
  country  String
  zip      String
  type     AddressType // Assuming type is a string, you may adjust according to your needs

  // Define the relationship to Customer
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId // MongoDB ObjectId reference to Customer
}

// Define your supplier model
model Supplier {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String          @unique
  email         String?
  address       String?
  company       String?
  country       String?
  description   String?
  designation   String?
  status        Status          @default(Active)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  purchaseOrder PurchaseOrder[]
  grn           GRN[]
  product       Product[]

  @@index([name, phone])
  @@map("suppliers")
}

//Product Model
model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name             String
  salesType        String
  articleCode      String   @unique
  ean              String
  // Define the relationship with master category
  masterCategory   Category @relation(fields: [masterCategoryId], references: [id], name: "masterCategory")
  masterCategoryId String   @db.ObjectId

  // Define the relationship with category
  category   Category @relation(fields: [categoryId], references: [id], name: "category") // Relation to category
  categoryId String   @db.ObjectId

  unit   Unit   @relation(fields: [unitId], references: [id])
  unitId String @db.ObjectId // MongoDB ObjectId reference to Unit

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String @db.ObjectId // MongoDB ObjectId reference to Brand

  vat        Int? // Assuming VAT is stored as a Int? value
  vatMethod  Boolean
  hsCode     String
  type       String
  shipping   String
  featured   String    @default("false")
  website    String    @default("true")
  status     Status    @default(Active)
  slug       String    @unique
  price      Int?
  promoPrice Int?
  promoStart DateTime?
  promoEnd   DateTime?
  photo      String // Assuming photo is stored as a URL
  // gallery      String[] @default([""]) // Array of photo URLs for gallery
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  supplierId String    @db.ObjectId // MongoDB ObjectId reference to Brand

  pisInPackege  Int? // Assuming supplier is a string, you may adjust according to your needs
  description   String?
  specification String?

  // inventory
  openingQty Int? @default(0)
  soldQty    Int? @default(0)
  returnQty  Int? @default(0)
  damageQty  Int? @default(0)
  closingQty Int? @default(0)
  mrp        Int?
  tp         Int?
  cogs       Int? @default(0)

  closingStock ClosingStock[]
  productPO    POProduct[]
  grnProduct   GRNProduct[]
  tpnProduct   TPNProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, articleCode])
  @@map("products")
}

// Define the Category model
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  photo       String // Assuming photo is stored as a URL

  // Define the relationship for parent category
  parent   Category? @relation("subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Optional parentId category
  parentId String?   @db.ObjectId // Optional parent category id

  // Define the relationship with products
  products       Product[] @relation("category")
  masterProducts Product[] @relation("masterCategory")

  // Define the relationship for subcategories
  subcategories Category[] @relation("subcategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Brand model
model Brand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  logo        String? // Assuming logo is stored as a URL

  // Define the relationship for products
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Unit model
model Unit {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  symbol      String

  // Define the relationship for products
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the ClosingStock model
model ClosingStock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId // MongoDB ObjectId reference to Product
  quantity  Int
  date      DateTime
}

// Define the PurchaseOrder model
model PurchaseOrder {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  poNo        String
  supplier    Supplier    @relation(fields: [supplierId], references: [id])
  supplierId  String      @db.ObjectId // MongoDB ObjectId reference to Supplier
  containerId String?
  products    POProduct[] // Array of products in the purchase order
  grn         GRN[]

  totalItem       Int?
  total           Int?
  tax             Int?
  discount        Int?
  grossTotal      Int?
  grossTotalRound Int?

  status String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the ProductPO model (representing products within a PurchaseOrder)
model POProduct {
  id          String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  articleCode String
  qty         Int
  mrp         Int?
  tp          Int?
  total       Int?
  vat         Int?
  stock       Int
  hsCode      String
  supplier    String
  tax         Int?

  // Define the relationship to the parent PurchaseOrder
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String        @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

  // Define the relationship with the Product model
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product
}

// Define the PurchaseOrder model
model TPN {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  tpnNo    String
  // supplier    Supplier    @relation(fields: [supplierId], references: [id])
  // supplierId  String      @db.ObjectId // MongoDB ObjectId reference to Supplier
  // containerId String?
  products TPNProduct[] // Array of products in the purchase order
  grn      GRN[]

  totalItem       Int?
  total           Int?
  tax             Int?
  discount        Int?
  grossTotal      Int?
  grossTotalRound Int?

  status String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  whTo   WareHouse @relation(fields: [whToId], references: [id], name: "whTo")
  whToId String   @db.ObjectId

  // Define the relationship with WareHouse
  whFrom   WareHouse @relation(fields: [whFromId], references: [id], name: "whFrom") // Relation to category
  whFromId String   @db.ObjectId
}

model WareHouse {
  id       String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name     String
  company  String
  code     String
  address  String
  type     WareHouseType
  email    String?
  phone    String?
  status   String
    // Define the relationship with products
  whToTpn   TPN[] @relation("whTo")
  whFromTpn TPN[] @relation("whFrom")
}

// Define the ProductPO model (representing products within a PurchaseOrder)
model TPNProduct {
  id          String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  articleCode String
  qty         Int
  mrp         Int?
  tp          Int?
  total       Int?
  vat         Int?
  stock       Int
  hsCode      String
  supplier    String
  tax         Int?

  // Define the relationship to the parent PurchaseOrder
  tpn   TPN    @relation(fields: [tpnId], references: [id])
  tpnId String @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

  // Define the relationship with the Product model
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product
}

// Define the GRN model
model GRN {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  grnNo      String
  supplier   Supplier       @relation(fields: [supplierId], references: [id])
  supplierId String         @db.ObjectId // MongoDB ObjectId reference to Supplier
  poNo       PurchaseOrder? @relation(fields: [poNoId], references: [id])
  poNoId     String?        @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

  tpnNo       TPN?         @relation(fields: [tpnId], references: [id])
  tpnId       String?      @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder
  containerNo String?
  products    GRNProduct[] // Array of products in the GRN

  total           Int?
  grossTotal      Int?
  grossTotalRound Int?
  totalItem       Int
  tax             Int?
  discount        Int?
  status          String
  user            User   @relation(fields: [userId], references: [id])
  userId          String @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the GRNProduct model (representing products within a GRN)
model GRNProduct {
  id          String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  articleCode String
  qty         Int
  mrp         Int?
  tp          Int?
  total       Int?
  vat         Int?
  stock       Int
  hsCode      String
  supplier    String
  totalItem   Int
  tax         Int?
  discount    Int?

  // Define the relationship with the parent GRN
  grn   GRN    @relation(fields: [grnId], references: [id])
  grnId String @db.ObjectId // MongoDB ObjectId reference to GRN

  // Define the relationship with the Product model
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product
}

enum UserType {
  Admin
  Manager
  Marketing
  Sales
  Stuff
}

enum AddressType {
  Home
  Office
  Delivery
  Billing
  Business
}

enum CustomerType {
  Wholesale
  Retail
}
enum WareHouseType {
  Store
  Warehouse
}

enum Status {
  Active
  Inactive
}

enum DataStatus {
  Complete
  Pending
  Delete
}

enum paymentMethodType {
  Cash
  Card
  MFS
}
