// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// user model
model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String?  @unique// Optional email field
  phone    String   @unique
  name     String   
  username String   @unique
  password String
  type     UserType // Enum for user type
  status   Status // Enum for user Status
  photo    String
  purchaseOrder PurchaseOrder[]
  grn GRN[]
  tpn TPN[]
  rtv RTV[]
  damage Damage[]
  adjust Adjust[]
  sale Sales[]
  // activityLog []

  @@map("users") // Maps to the "users" collection in MongoDB
  @@index([phone, email, username])
}

//activity log model
// model ActivityLog{
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   module ModuleName

// }



// Define your Customer model
model Customer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   
  phone        String   @unique 
  email        String?
  address      Address[]
  photo         String? 
  username      String? 
  password      String? 
  type          CustomerType @default(Wholesale)
  contactPerson String?
  contactPersonPhone String?   
  company      String?
  designation  String?
  status       Status   @default(Active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customerId   String   @unique
  sales Sales[]

  @@map("customers")
  @@index([phone, email, username])
}

// Define the Address model
model Address {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId// MongoDB ObjectId
  street    String
  city      String
  district  String
  division  String
  country   String
  zip       String
  type      String    // Assuming type is a string, you may adjust according to your needs
  
  // Define the relationship to Customer
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String    @map("customerId") @db.ObjectId // MongoDB ObjectId reference to Customer
}

// Define your supplier model
model Supplier {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   
  phone        String   @unique 
  email        String?
  address      String?
  company      String?
  designation  String?
  status       Status   @default(Active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  purchaseOrder PurchaseOrder []
  grn GRN[]
  rtv RTV[]

  @@map("suppliers")
  @@index([name, phone])
}

//Product Model
model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId// MongoDB ObjectId
  name          String
  code          String      @unique
  articleCode   String      @unique
  masterCategory String
  category      String
 
  unit          Unit        @relation(fields: [unitId], references: [id])
  unitId        String      @map("unitId") @db.ObjectId// MongoDB ObjectId reference to Unit

  brand         Brand       @relation(fields: [brandId], references: [id])
  brandId       String     @map("brandId")  @db.ObjectId// MongoDB ObjectId reference to Brand

  vat           Float       // Assuming VAT is stored as a float value
  hsCode        String
  type          String
  shipping      String
  featured      Boolean   @default(false)
  website       Boolean   @default(false)
  status        Status    @default(Active)
  slug          String      @unique
  price         Float
  promoPrice    Float
  promoStart    DateTime?
  promoEnd      DateTime?
  photo         String      // Assuming photo is stored as a URL
  gallery       String[]    // Array of photo URLs for gallery
  supplier      String      // Assuming supplier is a string, you may adjust according to your needs
  pisInPackege  Int      // Assuming supplier is a string, you may adjust according to your needs

// inventory
  openingQty    Float
  grnQty        Float
  soldQty       Float
  rtvQty        Float
  tpnQty        Float
  returnQty     Float
  damageQty     Float
  closingQty    Float
  mrp           Float
  tp            Float
  cogs          Float

  closingStock  ClosingStock[]
  productPO     POProduct[]
  grnProduct    GRNProduct[]
  tpnProduct    TPNProduct[]
  damageProduct    DamageProduct[]
  adjstProduct    AdjustProduct[]
  rtvProduct    RTVProduct[]
  saleProduct    SalesProduct[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("products")
  @@index([name, articleCode])
}


// Define the Category model
model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String      @unique
  status      String
  photo       String      // Assuming photo is stored as a URL

  // Define the relationship for parent category
  parent      Category?   @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Optional parent category
  parentId    String?     @map("Subcategories") @db.ObjectId// Optional parent category id


  // Define the relationship for subcategories
  subcategories Category[] @relation("Subcategories")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}



// Define the Brand model
model Brand {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name         String
  description  String?
  code         String      @unique
  status       String
  logo         String      // Assuming logo is stored as a URL

  // Define the relationship for products
  products     Product[]  

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Define the Unit model
model Unit {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name         String
  description  String?
  code         String      @unique
  status       String
  symbol       String

  // Define the relationship for products
  products     Product[]  

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Define the ClosingStock model
model ClosingStock {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  product          Product      @relation(fields: [productId], references: [id])
  productId        String       @map("productId") @db.ObjectId// MongoDB ObjectId reference to Product
  quantity         Int
  date             DateTime
}

// Define the Sales model
model Sales {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  invoiceNo         String
  customer          Customer       @relation(fields: [customerId], references: [id])
  customerId        String         @map("customerId")  @db.ObjectId// MongoDB ObjectId reference to Customer
  products          SalesProduct[] // Array of products in the sale

  total             Float
  grossTotal        Float
  grossTotalRound   Float
  totalItem         Int
  tax               Float
  discount          Float
  promoDiscount     Float
  status            String
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @map("userId") @db.ObjectId // MongoDB ObjectId reference to User

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Define the SalesProduct model (representing products within a sale)
model SalesProduct {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name              String
  articleCode       String
  qty               Int
  mrp               Float
  tp                Float
  total             Float
  vat               Float
  stock             Int
  hsCode            String
  promoDiscount     Float
  totalItem         Int
  tax               Float
  discount          Float

  // Define the relationship with the parent Sales
  sales             Sales        @relation(fields: [salesId], references: [id])
  salesId           String       @map("saleId") @db.ObjectId // MongoDB ObjectId reference to Sales

  // Define the relationship with the Product model
  product           Product      @relation(fields: [productId], references: [id])
  productId         String       @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product

}

// Define the PurchaseOrder model
model PurchaseOrder {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  poNo            String
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  supplierId      String         @map("supplierId") @db.ObjectId // MongoDB ObjectId reference to Supplier
  containerId     String?
  products        POProduct[]    // Array of products in the purchase order
  grn GRN[]


  totalItem       Float
  total           Float
  tax             Float
  discount        Float
  grossTotal      Float
  grossTotalRound Float

  status          String
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("userId") @db.ObjectId // MongoDB ObjectId reference to User

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Define the ProductPO model (representing products within a PurchaseOrder)
model POProduct {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name            String
  articleCode     String
  qty             Int
  mrp             Float
  tp              Float
  total           Float
  vat             Float
  stock           Int
  hsCode          String
  supplier        String
  tax             Float

  // Define the relationship to the parent PurchaseOrder
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String        @map("purchaseId") @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

  // Define the relationship with the Product model
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("_productId") @db.ObjectId// MongoDB ObjectId reference to Product

}



// Define the GRN model
model GRN {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  grnNo           String
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  supplierId      String         @map("supplierId") @db.ObjectId// MongoDB ObjectId reference to Supplier
  poNo            PurchaseOrder? @relation(fields: [poNoId], references: [id])
  poNoId          String?        @map("poNoId") @db.ObjectId// MongoDB ObjectId reference to PurchaseOrder
  containerNo     String?
  products        GRNProduct[]   // Array of products in the GRN

  total           Float
  grossTotal      Float
  grossTotalRound Float
  totalItem       Int
  tax             Float
  discount        Float
  status          String
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("userId") @db.ObjectId// MongoDB ObjectId reference to User

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Define the GRNProduct model (representing products within a GRN)
model GRNProduct {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name            String
  articleCode     String
  qty             Int
  mrp             Float
  tp              Float
  total           Float
  vat             Float
  stock           Int
  hsCode          String
  supplier        String
  totalItem       Int
  tax             Float
  discount        Float

  // Define the relationship with the parent GRN
  grn             GRN           @relation(fields: [grnId], references: [id])
  grnId           String        @db.ObjectId// MongoDB ObjectId reference to GRN

  // Define the relationship with the Product model
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("_productId")  @db.ObjectId// MongoDB ObjectId reference to Product

}


// Define the TPN model
model TPN {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  tpnNo           String
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [id])
  warehouseId     String         @db.ObjectId // MongoDB ObjectId reference to Warehouse
  products        TPNProduct[]   // Array of products in the TPN

  total           Float
  grossTotal      Float
  grossTotalRound Float
  totalItem       Int
  tax             Float
  discount        Float
  status          String
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("userId") @db.ObjectId // MongoDB ObjectId reference to User

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Define the TPNProduct model (representing products within a TPN)
model TPNProduct {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name            String
  articleCode     String
  qty             Int
  mrp             Float
  tp              Float
  total           Float
  vat             Float
  stock           Int
  hsCode          String
  warehouse       String
  totalItem       Int
  tax             Float
  discount        Float

  // Define the relationship with the parent TPN
  tpn             TPN           @relation(fields: [tpnId], references: [id])
  tpnId           String        @map("tpnId") @db.ObjectId

  // Define the relationship with the Product model
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("_productId") @db.ObjectId

}


// Define the RTV model
model RTV {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  rtvNo           String
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  supplierId      String         @map("supplierId") @db.ObjectId // MongoDB ObjectId reference to Supplier
  containerNo     String?
  products        RTVProduct[]   // Array of products in the RTV

  total           Float
  grossTotal      Float
  grossTotalRound Float
  totalItem       Int
  tax             Float
  discount        Float
  status          String
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("userId") @db.ObjectId // MongoDB ObjectId reference to User

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Define the RTVProduct model (representing products within an RTV)
model RTVProduct {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name            String
  articleCode     String
  qty             Int
  mrp             Float
  tp              Float
  total           Float
  vat             Float
  stock           Int
  hsCode          String
  supplier        String
  totalItem       Int
  tax             Float
  discount        Float

  // Define the relationship with the parent RTV
  rtv             RTV           @relation(fields: [rtvId], references: [id])
  rtvId           String        @map("rtvId") @db.ObjectId // MongoDB ObjectId reference to RTV

  // Define the relationship with the Product model
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("_productId") @db.ObjectId// MongoDB ObjectId reference to Product

}


// Define the Damage model
model Damage {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  damageNo        String

  products        DamageProduct[]   // Array of products in the damage report

  total           Float
  grossTotal      Float
  grossTotalRound Float
  totalItem       Int
  tax             Float
  discount        Float
  status          String
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @map("userId") @db.ObjectId // MongoDB ObjectId reference to User

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Define the DamageProduct model (representing products within a damage report)
model DamageProduct {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name            String
  articleCode     String
  qty             Int
  mrp             Float
  tp              Float
  total           Float
  vat             Float
  stock           Int
  hsCode          String
  supplier        String
  totalItem       Int
  tax             Float
  discount        Float

  // Define the relationship with the parent Damage
  damage          Damage        @relation(fields: [damageId], references: [id])
  damageId        String        @map("damageId") @db.ObjectId // MongoDB ObjectId reference to Damage

  // Define the relationship with the Product model
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product
}


// Define the Warehouse model
model Warehouse {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  code        String      @unique
  address     String
  phone       String
  company     String
  type        String
  store       String
  warehouse   String
  status      String

  // Define the relationship with TPNs
  tpns        TPN[]       // Array of TPNs associated with this warehouse

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Define the Adjust model
model Adjust {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  adjustNo         String
  date             DateTime
 
  containerNo      String?
  products         AdjustProduct[] // Array of products in the adjustment

  total            Float
  grossTotal       Float
  grossTotalRound  Float
  totalItem        Int
  tax              Float
  discount         Float
  status           String
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @map("userId") @db.ObjectId// MongoDB ObjectId reference to User

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// Define the AdjustProduct model (representing products within an adjustment)
model AdjustProduct {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name             String
  articleCode      String
  qty              Int
  mrp              Float
  tp               Float
  total            Float
  vat              Float
  stock            Int
  hsCode           String
  Type             AdjustType @default(Positive)
  supplier         String
  totalItem        Int
  tax              Float
  discount         Float

  // Define the relationship with the parent Adjust
  adjust           Adjust        @relation(fields: [adjustId], references: [id])
  adjustId         String        @map("adjustId") @db.ObjectId // MongoDB ObjectId reference to Adjust

  // Define the relationship with the Product model
  product          Product       @relation(fields: [productId], references: [id])
  productId        String        @map("_productId") @db.ObjectId// MongoDB ObjectId reference to Product

}

enum UserType {
  Admin
  Manager
  Marketing
  Sales
  stuff
}

enum AdjustType {
  Positive
  Negative
}

enum CustomerType {
  Wholesale
  Retail
}

enum Status {
  Active
  Inactive
}

enum DataStatus {
  Complete
  Pending
  Delete
}

// enum ModuleName {
//     Sales
//     products
//     adjust

// }

enum paymentMethodType {
  Cash
  Card
  MFS
}