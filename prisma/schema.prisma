// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user model
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String?         @unique // Optional email field
  phone         String          @unique
  name          String
  username      String          @unique
  password      String
  type          UserType // Enum for user type
  status        Status // Enum for user Status
  photo         String?
  warehouse     WareHouse       @relation(fields: [warehouseId], references: [id])
  warehouseId   String          @db.ObjectId // MongoDB ObjectId reference to User
  purchaseOrder PurchaseOrder[]
  grn           Grn[]
  tpn           Tpn[]
  sales         Sales[]
  damage        Damage[]
  adjust  Adjust[]
  userLogs      UserLogs[]
  // activityLog []

  @@index([phone, email, username])
  @@map("users") // Maps to the "users" collection in MongoDB
}

// Define your Customer model
model Customer {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String       @unique
  email      String?
  address    Json[] //{street, city, state, zip, country}
  photo      String?
  username   String?
  password   String?
  type       CustomerType @default(Wholesale)
  status     Status       @default(Active)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  customerId String       @unique

  //Corporate

  contactPerson      String?
  contactPersonPhone String?
  company            String?
  designation        String?
  bin                String?
  tin                String?
  treadLicense       String?
  creditOption       String?
  cLimitAmount       String?
  cLimitDay          String?

  sales Sales[]

  @@index([phone, email, username])
  @@map("customers")
}


// Define your supplier model
model Supplier {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String          @unique
  email         String?
  address       String?
  company       String?
  country       String?
  description   String?
  designation   String?
  status        Status          @default(Active)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  purchaseOrder PurchaseOrder[]
  grn           Grn[]
  product       Product[]

  @@index([name, phone])
  @@map("suppliers")
}

//Product Model
model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name             String
  salesType        String
  articleCode      String   @unique
  ean              String
  // Define the relationship with master category
  masterCategory   Category @relation(fields: [masterCategoryId], references: [id], name: "masterCategory")
  masterCategoryId String   @db.ObjectId

  // Define the relationship with category
  category   Category @relation(fields: [categoryId], references: [id], name: "category") // Relation to category
  categoryId String   @db.ObjectId

  unit   Unit   @relation(fields: [unitId], references: [id])
  unitId String @db.ObjectId // MongoDB ObjectId reference to Unit

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String @db.ObjectId // MongoDB ObjectId reference to Brand

  vat           Int? // Assuming VAT is stored as a Int? value
  vatMethod     Boolean
  hsCode        String
  type          String
  shipping      String
  featured      String    @default("false")
  website       String    @default("true")
  status        Status    @default(Active)
  slug          String    @unique
  price         Int?
  promoPrice    Int?
  promoStart    DateTime?
  promoEnd      DateTime?
  photo         String // Assuming photo is stored as a URL
  // gallery      String[] @default([""]) // Array of photo URLs for gallery
  supplier      Supplier  @relation(fields: [supplierId], references: [id])
  supplierId    String    @db.ObjectId // MongoDB ObjectId reference to Brand
  country       String?
  pisInPackege  Int? // Assuming supplier is a string, you may adjust according to your needs
  description   String?
  specification String?

  // inventory
  openingQty Int? @default(0)
  grnQty     Int?@default(0)
  returnQty  Int? @default(0)
  rcvAdjustQty  Int?@default(0)
  availableQty Int? @default(0)
  soldQty    Int? @default(0)
  tpnQty  Int? @default(0)
  damageQty  Int? @default(0)
  rtvQty  Int? @default(0)
  issueAdjustQty  Int? @default(0)
  closingQty Int? @default(0)
 

  mrp        Int?
  tp         Int?
  cogs       Int? @default(0)

  closingStock ClosingStock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, articleCode])
  @@map("products")
}

// Define the Category model
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  photo       String? // Assuming photo is stored as a URL

  // Define the relationship for parent category
  parent   Category? @relation("subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Optional parentId category
  parentId String?   @db.ObjectId // Optional parent category id

  // Define the relationship with products
  products       Product[] @relation("category")
  masterProducts Product[] @relation("masterCategory")

  // Define the relationship for subcategories
  subcategories Category[] @relation("subcategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Brand model
model Brand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  logo        String? // Assuming logo is stored as a URL

  // Define the relationship for products
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Unit model
model Unit {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name        String
  description String?
  code        String  @unique
  status      String
  symbol      String

  // Define the relationship for products
  products Product[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the ClosingStock model
model ClosingStock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId // MongoDB ObjectId reference to Product
  quantity  Int
  date      DateTime
}

// Define the PurchaseOrder model
model PurchaseOrder {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  poNo            String
  supplier        Supplier? @relation(fields: [supplierId], references: [id])
  supplierId      String    @db.ObjectId // MongoDB ObjectId reference to Supplier
  containerId     String?
  products        Json[] // {articleCode, name, quantity, order, mrp,tp,supplier}
  grn             Grn[]
  lcNo            String?
  piNo            String?
  totalItem       Int?
  total           Int?
  tax             Int?
  discount        Int?
  country         String?
  grossTotal      Int?
  grossTotalRound Int?
  note            String?

  status DataStatus
  user   User       @relation(fields: [userId], references: [id])
  userId String     @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the ProductPO model (representing products within a PurchaseOrder)
// model POProduct {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
//   name        String
//   articleCode String
//   qty         Int
//   mrp         Int?
//   tp          Int?
//   total       Int?
//   vat         Int?
//   stock       Int
//   hsCode      String
//   supplier    String
//   tax         Int?

//   // Define the relationship to the parent PurchaseOrder
//   purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
//   purchaseOrderId String        @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

//   // Define the relationship with the Product model
//   product   Product @relation(fields: [productId], references: [id])
//   productId String  @map("_productId") @db.ObjectId // MongoDB ObjectId reference to Product
// }

// Define the PurchaseOrder model
model Tpn {
  id       String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  tpnNo    String
  // supplier    Supplier    @relation(fields: [supplierId], references: [id])
  // supplierId  String      @db.ObjectId // MongoDB ObjectId reference to Supplier
  // containerId String?
  products Json[] // Array of products in the purchase order
  grn      Grn[]

  totalItem       Int?
  total           Int?
  tax             Int?
  discount        Int?
  grossTotal      Int?
  grossTotalRound Int?

  status String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  whTo   WareHouse @relation(fields: [whToId], references: [id], name: "whTo")
  whToId String    @db.ObjectId

  // Define the relationship with WareHouse
  whFrom   WareHouse @relation(fields: [whFromId], references: [id], name: "whFrom") // Relation to category
  whFromId String    @db.ObjectId
}

model WareHouse {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name      String
  company   String
  code      String
  address   String
  type      WareHouseType
  email     String?
  phone     String?
  status    String
  // Define the relationship with products
  whToTpn   Tpn[]         @relation("whTo")
  whFromTpn Tpn[]         @relation("whFrom")
  userToWh  User[]
  sales     Sales[]
  adjust    Adjust[]
  damage    Damage[]
}

// Define the GRN model
model Grn {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  grnNo      String
  supplier   Supplier       @relation(fields: [supplierId], references: [id])
  supplierId String         @db.ObjectId // MongoDB ObjectId reference to Supplier
  poNo       PurchaseOrder? @relation(fields: [poNoId], references: [id])
  poNoId     String?        @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder

  tpnNo    Tpn?    @relation(fields: [tpnId], references: [id])
  tpnId    String? @db.ObjectId // MongoDB ObjectId reference to PurchaseOrder
  products Json[] // Array of products in the GRN

  note            String?
  total           Int?
  grossTotal      Int?
  grossTotalRound Int?
  totalItem       Int
  tax             Int?
  discount        Int?
  status          DataStatus

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId // MongoDB ObjectId reference to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLogs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId // MongoDB ObjectId reference to User
  date       DateTime @default(now())
  otType     String?
  otInvoice  String?
  module     String?
  userAgent  Json[]
  userStatus String?
}

model Sales {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  invoiceId         String
  source            String
  warehouse         WareHouse @relation(fields: [warehouseId], references: [id])
  warehouseId       String    @db.ObjectId // MongoDB ObjectId reference to User
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @db.ObjectId // MongoDB ObjectId reference to User
  customer          Customer  @relation(fields: [customerId], references: [id])
  customerId        String    @db.ObjectId // MongoDB ObjectId reference to User\

  products          Json[]
  orderCalculation Json? //totalItem, total, vat, grossTotal, grossTotalRound
  returnActive      Boolean?
  returnProducts    Json[]
  returnCalculation Json? ////totalItem, total, vat, grossTotal, grossTotalRound

  soldProducts    Json[]
  soldCalculation Json? ////totalItem, total, vat, grossTotal, grossTotalRound

  totalItem         Int
  total             Int
  discount          Int
  vat               Int
  grossTotal        Int
  grossTotalRound   Int
  totalRecievable   Int
  changeAmount      Int
  paidAmount        Json?
  totalRecieved     Int

  status            DataStatus
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

}

model Adjust {
  id       String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  adjustMentNo    String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId // MongoDB ObjectId reference to User
  products Json[]
  note     String?
  warehouse         WareHouse @relation(fields: [warehouseId], references: [id])
  warehouseId       String    @db.ObjectId // MongoDB ObjectId reference to User
  rcvAdjustmentQty     Int? @default(0)
  rcvAdjustmentTotal   Int? @default(0)
  issueAdjustQty       Int? @default(0)
  issueAdjustTotal     Int? @default(0)
  total     Int? @default(0)
  totalItem     Int? @default(0)
  grossTotal     Int? @default(0)
  grossTotalRound     Int? @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  status            DataStatus
}

model Damage {
  id       String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  user     User   @relation(fields: [userId], references: [id])
   damageNo    String
  products Json[]
  userId   String @db.ObjectId // MongoDB ObjectId reference to User
  note     String?
  warehouse         WareHouse @relation(fields: [warehouseId], references: [id])
  warehouseId       String    @db.ObjectId // MongoDB ObjectId reference to User

  total     Int? @default(0)
  totalItem     Int? @default(0)
  grossTotal     Int? @default(0)
  grossTotalRound     Int? @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  status            DataStatus
}

model OrderProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
}

model ReturnProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
}

enum UserType {
  Admin
  Manager
  Marketing
  Sales
  Stuff
}

enum AddressType {
  Home
  Office
  Delivery
  Billing
  Business
}
enum AdjustType {
  In
  Out
}

enum CustomerType {
  Wholesale
  Retail
}

enum WareHouseType {
  Store
  Warehouse
}

enum Status {
  Active
  Inactive
}

enum DataStatus {
  Complete
  Pending
  Ordered
  Delete
}

enum paymentMethodType {
  Cash
  Card
  MFS
}
